[user]
    name = Ceasar Bautista

    email = cbautista2010@gmail.com


[alias]
    # Use template "!sh -c 'git command $0'" for positional arguments


    # Because feedback is important
    join = add -v
    append = add -v

    remotes = remote -v

    # Unmodify/Discard a change
    unmodify = checkout HEAD --
    discard = checkout HEAD --

    # Undo add (move changes from index to working directory)
    unstage = reset HEAD

    # Undo the previous commit, and leave the changes in the index
    uncommit = reset --soft HEAD^

    # Undo the latest commit, and leave the changes in the working directory
    # uncommit = reset HEAD^

    # Amend the last commit
    amend = commit --amend

    # Squash multiple commits into one
    # Must provide argument in the form HEAD~$1 where $1 is the
    # number of commits to squash together (including the one you
    # wish to keep). In other words, if you wish to squash the last
    # commit into the one before it, use 'git squash HEAD~2'.
    #
    # NOTE: Do not squash commits that you've shared with other.
    # Squashing changes history and will cause trouble when merging.
    squash = rebase -i

    # Sync with master
    # Rebase the current branch on top of upstream after fetching.
    # Show diff stat at the end.
    sync = pull --stat --rebase origin master


    # Stashes
    # =======

    # unstash [-q|--quiet] [<stash>]
    # `apply` a stash and then `drop` it immediately from the stack.
    # Additionally we use the index option to restage any files that might
    # have been staged
    # When no <stash> is given, stash@{0} is assumed, otherwise <stash>
    # must be a reference of the form stash@{<revision>}.
    unstash = stash pop --index

    # Show all stashes
    stashes = stash list


    # History
    # =======

    # Show the last commit
    last = log -1 HEAD --stat --abbrev-commit
    showlast = log -1 HEAD --stat --abbrev-commit

    # Show any changes from the last commit
    difflast = diff HEAD^

    # Pretty, high/density history
    # %Ccolor sets a color
    # %s - subject of a commit
    # %ad - date of a commit. Respects date option
    # %an - author of a commit
    # %h - abbreviated hash
    hist = log --pretty=format:\"%Cgreen%s %Cred%ad %Cblue[%an] %Creset%h\" --graph --date=relative

    # Search historical commits for a keyword
    greplog = !sh -c 'git log --grep=$0'

    # Search historical diffs for a keyword
    grepdiff = !sh -c 'git log -S$0 --stat'
    pickax = !sh -c 'git log -S$0 --stat'


    # Start a branch
    start = checkout -b

    # Continue working on a branch
    resume = checkout

    # Finish a branch
    finish = push origin

    # Delete and remove a branch after it is accepted
    accept = !sh -c 'git delete $0 && git remove $0'


    # Switch to master
    master = checkout master

    # Create a branch and switch to it
    create = checkout -b

    # Delete a branch
    delete = branch -d

    # Remove a remote branch
    remove = !sh -c 'git push origin :$0'

    # Show all merged branches
    merged = branch --merged

    # Show all unmerged branches
    unmerged = branch --no-merged

    # Show all branches
    list = branch
    branches = branch

    # Rename a branch
    rename = branch -m


    # Bend master at $0, moving all commits after $0 onto branch $1
    # * Create branch $1 (but do not switch to it)
    # * Point the current branch at $0 keeping local index and working directory intact
    bend = !sh -c 'git branch $1 && git reset --soft $0'


[color]
    # Color everything
    ui = true


[help]
    # Automatically correct and execute mistyped commands after waiting
    # for the given number of deciseconds (0.1 sec). If more than one
    # command can be deduced from the entered text, nothing will be
    # executed. If the value of this option is negative, the corrected
    # command will be executed immediately. If the value is 0 - the
    # command will be just shown but not executed. This is the default.
    autocorrect = -1


[log]
    # Make all dates in the log relative
    date = relative

    decorate
[core]
	editor = vim
